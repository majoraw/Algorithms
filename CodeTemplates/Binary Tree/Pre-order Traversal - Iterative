/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

/**
*Taking pre-order traversal as an example, in each iteration, we pop one node from the stack and visit this node. 
*Then if this node has a right child, push its right child into the stack. 
*If this node has a left child, push its left child into the stack. 
*It is noteworthy that we push the right child first so that we can visit the left child first since the nature of the stack is LIFO(last in first out). 
*After that, we can continue to the next iteration until the stack is empty.
*/


class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> answer = new ArrayList<>();
        Stack<TreeNode> s = new Stack<TreeNode>();
        if (root != null) {
            s.push(root);
        }
        TreeNode cur;
        while (!s.empty()) {
            cur = s.pop();
            answer.add(cur.val);            // visit the root
            if (cur.right != null) {
                s.push(cur.right);          // push right child to stack if it is not null
            }
            if (cur.left != null) {
                s.push(cur.left);           // push left child to stack if it is not null
            }
        }
        return answer;
    }
}
